# vim: set filetype=sh:

##########################################
### Packages Management (Debian-based) ###
##########################################

# List installed packages by size, in descending order
dpkg-query -W -f='${Installed-Size;8}  ${Package}\n' | sort -nr

########################################
### Packages Management (Arch-based) ###
########################################

# List all explicitly installed packages that are not dependencies
pacman -Qet

# List installed packages by size, in descending order
pacman -Qi | awk '/^Name/{name=$3} /^Installed Size/{print $4$5, name}' | sort -hr
yay -Ps

# List installed packages by installation/last update time, the most recent
# first
expac --timefmt='%Y-%m-%d %T' '%l\t%n' | sort -r

# Remove orphaned dependencies
sudo pacman -Rs $(pacman -Qqdt)

# Display detailed information on a upgradable packages
pacman -Qii $(checkupdates+aur | cut -d' ' -f1)

# Move all the cached packages to different directory
sudo rsync -aHAXP --remove-source-files /var/cache/pacman/pkg/ dir/
paccache -vvv -k 0 -m dir/

# Remove old cached packages, keeping 3 last versions of specific package
paccache -vvv -r
paccache -vvv -r -c cache_dir

####################################
### Packages Management (Python) ###
####################################

# Upgrade pip
pip install --upgrade pip

# List all installed packages without versions
pip list --format=columns 2>/dev/null | cut -s -d ' ' -f 1 | tail -n +3

# Install packages listed in the file
pip install -r requirements.txt

###################################
### Packages Management (macOS) ###
###################################

# Upgrade packages
brew update
brew upgrade
brew cask upgrade

# List outdated packages
brew outdated
brew cask outdated

# Show info about the package
brew info <package>

#############
### C/C++ ###
#############

# Link specific library
gcc <...> -l:libboost_system.so.1.66.0

# Start without introductory and copyright messages
gdb -q
# Pass arguments to debugged executable
gdb --args <executable_name> <arguments>

# Set non-default C++ compiler (from the command line)
qmake 'QMAKE_CXX=colorgcc' ..
# Link additional libraries (from the command line)
qmake 'LIBS += -l:libboost_system.so.1.66.0 -l:libboost_program_options.so.1.66.0' ..

##################
### Networking ###
##################

# Print all IPv4 HTTP packets containing data to and from port 80 and host
# <ip_address>, i.e. omit SYN, FIN, ACK-only and similar kind of packets
tcpdump 'tcp port 80 and host <ip_address> and (((ip[2:2] - ((ip[0]&0xf)<<2)) - ((tcp[12]&0xf0)>>2)) != 0)'
# Print each packet in ASCII (e.g. content of HTTP requests/responses)
tcpdump -A
# Don't convert addresses to names
tcpdump -n

# Show both listening and non-listening sockets
netstat -a
# Show numerical addresses
netstat -n
# Show connections using TCP protocol
netstat -t
# Show connections using UDP protocol
netstat -u
# Display the kernel routing tables
netstat -r
# Show the PID and name of the program to which each socket belongs
netstat -p

###################
### Job Control ###
###################

# List background jobs
jobs
# Run cmd in background
<cmd> &
# Move current cmd to the background
<Ctrl+Z>
# Move the most recent job to the foreground
fg
# Move job with specific id to the foreground
fg <id>
# Kill the most recent job
kill %%
# Kill job with specific id
kill <id>

###########
### SQL ###
###########

# Connect to chosen MSSQL server
sqlcmd -S <server_name> -d <database_name> -U <username> -P <password>
# Connect to chosen PostgreSQL database
psql -h <server_name> -d <database_name> -U <username> -p <port>

# Connect to running MySQL docker-compose container
docker-compose run --rm <service_name> mysql -h <service_name> -u root -D ${MYSQL_DATABASE} -p ${MYSQL_ROOT_PASSWORD}
# Connect to running MySQL docker-compose container (prompt for password)
docker-compose run --rm <service_name> mysql -h <service_name> -u root -D ${MYSQL_DATABASE} -p
# Restore MySQL data from database dump
docker-compose run --rm <service_name> sh -c "exec mysql -h <service_name> -u root -D ${MYSQL_DATABASE} -p ${MYSQL_ROOT_PASSWORD}" < dump.sql

#######################
### Storage Devices ###
#######################

# Mount device
sudo mount /dev/sdc1 /mnt
# or
udisksctl mount -b /dev/sdc1

# Unmount device
sudo umount /mnt
# or
sudo umount /dev/sdc1
# or (https://unix.stackexchange.com/a/178648)
udisksctl unmount -b /dev/sdc1
udisksctl power-off -b /dev/sdc

# Format the USB stick (https://askubuntu.com/a/223607/737231)
umount /dev/sdc1
sudo dd if=/dev/zero of=/dev/sdc bs=1M status=progress
sudo fdisk /dev/sdc
    Command: n
    Select: p
    Partition number: 1
    First sector: <return>
    Last sector, +sectors or +size{K,M,G}: <return>
    Command: t
    Hex code: 6
    Command: w
sudo mkfs.vfat /dev/sdc1 -n LABEL -v

# Check if device is a LUKS device
cryptsetup isLuks <device>

# Open the LUKS device and map it
cryptsetup open --type luks <device> <mapping_name>
# or
cryptsetup luksOpen <device> <mapping_name>

# Close the LUKS device
cryptsetup close <mapping_name>

# Create swap file (alternative to swap partition)
sudo dd if=/dev/zero of=/swapfile bs=1M count=4096 status=progress
sudo chmod 600 /swapfile
sudo mkswap /swapfile
sudo swapon /swapfile
echo '/swapfile none swap defaults 0 0' >>/etc/fstab

###########
### SSH ###
###########

# Generate an SSH key pair
ssh-keygen -C "$(whoami)@$(hostname)-$(date -Iseconds)"
# Change the private key's passphrase
ssh-keygen -f <private_key> -p
# Change the keys' comment
ssh-keygen -f <private_key> -c -C <new_comment>
# Copy the public key to the remote server
ssh-copy-id -i <public_key> <destination>

# Connect with public key authentication explicitly disabled
ssh -o pubkeyauthentication=no <...>

####################
### File-copying ###
####################

# Copy 'src' to 'dest/src'
rsync -r 'src' 'dest'
# Copy content of 'src' to 'dest'
rsync -r 'src/' 'dest'

# Archive 'src' to 'dest/src'
rsync -a 'src' 'dest'
# Preserve hard links, ACLs and extended attributes
rsync -HAX 'src' 'dest'
# Keep partially transferred file(s), and show progress
rsync -P 'src' 'dest'
# All in one
rsync -aHAXP 'src' 'dest'

###############################
### Version Control Systems ###
###############################

# Change last commit message
git commit --amend

# Undo a commit and reuse the log message and the authorship information in the
# next commit
git commit
git reset HEAD~
git add ...
git commit -c ORIG_HEAD

# Change URL(s) for the origin remote
git remote set-url origin <new_url>
svn relocate <new_url>
# version < 1.7
svn switch --relocate <old_url> <new_url>

# Get hash of the last commit
git rev-parse HEAD

##############
### Docker ###
##############

# Remove all:
# - stopped containers,
# - networks not used by at least one container,
# - dangling images,
# - dangling build cache,
docker system prune

###############
### Printer ###
###############

# Print file
lpr <filename>
# Print only the odd pages of file
lpr -o page-set=odd <filename>
# Print only the even pages of file
lpr -o page-set=even <filename>
# Show printer queue status
lpq
# Cancel print jobs
lprm

###############
### Scanner ###
###############

# Scan image with the sane options (--resolution is flag specific to the
# device: Hewlett-Packard HP_LaserJet_Professional_M1132_MFP all-in-one)
scanimage --progress --format=tiff --mode Gray --resolution 300 >file.tiff

#################
### Sentry.io ###
#################

# Required sentry-cli env variables
export SENTRY_AUTH_TOKEN=...  # https://sentry.io/settings/account/api/auth-tokens/
export SENTRY_ORG=organization-slug

# List releases
sentry-cli releases list

# Show autogenerated release version
sentry-cli releases propose-version

# Create new release
sentry-cli releases new -p <project-slug> <version>

# Delete existing release
sentry-cli releases delete <version>

# Associate commits with the release
sentry-cli releases set-commits --commit '<owner/repo>@<full_hash>' '<version>'
# or
sentry-cli releases set-commits --commit '<owner/repo>@<from: full_hash>..<to: full_hash>' '<version>'
# or
sentry-cli releases set-commits --auto <version>

# Finalize (release) the release
sentry-cli releases finalize <version>

##################
### Encryption ###
##################

# Encrypt file symmetrically (creates <file>.gpg and do _not_ removes the
# original: shred recommended)
gpg -c <file>
# With specified cipher and disabled passphrase caching
gpg -c --cipher-algo 'AES256' --no-symkey-cache a.txt

# Decrypt file
gpg -d <file>

###################
### Compressing ###
###################

# Show ZIP content
unzip -l example.zip
zip -sf example.zip

# Unzip to specific directory
unzip -d <dir> example.zip

# Grep all ZIPs in current directory
find . -maxdepth 1 -type f -name '*.zip' -exec zipgrep '<pattern>' {} \;
# Grep all ZIPs in current directory (consider only specific files inside ZIPs)
find . -maxdepth 1 -type f -name '*.zip' -exec zipgrep '<pattern>' {} <files_to_consider> \;


###########
### Etc ###
###########

# Print basename of everything found recursively in the current directory
find . -exec basename {} \;
# GNU-only
find . -printf '%f\n'

# Create tag file 'tags' for source code found recursively in the current
# directory
ctags -R -f tags .

# Set foreground color of the current tmux pane
tmux select-pane -P 'fg=<color>'

# List all GPUs and show their kernel drivers and modules
lspci -k | grep -EA3 'VGA|3D|Display'

# Show the topology of the system
lstopo

# Blank the display (auto-unblank on mouse movement or keyboard input)
xset dpms force off
# Manually unblank the display
xset dpms force on

# Custom ps columns (e.g. pid, full start time and elapsed seconds since start)
ps -o pid,lstart,etimes
# Without headers
ps -o pid=,lstart=,etimes=

# Modify every 2nd line
sed "0~2s/.*/prefix&sufix/"
# Color every 2nd line
sed "0~2s/.*/$(printf '\e[36m')&$(printf '\e[0m')/"

# Reduce volume to 50% of its original value
ffmpeg -i input.mp3 -filter:a 'volume=0.5' output.mp3

# Change metadata title and artist of macOS's Voice Memo
ffmpeg -i input.m4a -metadata title='title' -metadata artist='artist' output.m4a

# Change metadata of MP3 file (ID3v1 tags)
mp3info -a 'artist' -l 'album' -t 'title' -n 'track number' -y 'year' input.mp3
# Change metadata of MP3 file (ID3v1 or ID3v2 tags)
eyeD3 -a 'artist' -A 'album' -t 'title' -n 'track number' -y 'year' input.mp3
# Convert metadata of MP3 file from ID3v1 to ID3v2 tags
eyeD3 -1 --to-v2.4 input.mp3

# Change covert art metadata (ID3v2 tags) of MP3 file
eyeD3 --add-image cover.jpg:FRONT_COVER input.mp3

# Cut the audio/video file w/o changing the encoding
ffmpeg -i input.mp4 -ss HH:MM:SS -to HH:MM:SS -c copy -avoid_negative_ts make-zero output.mp4

# Convert MP4 to MP3
ffmpeg -i input.mp3 -vn -b:a 320K output.mp3

# Rename the MP3 file based on ID3 tags (e.g. '03 - Any Way You Wanna Love.mp3')
mv -vi input.mp3 "$(mp3info -p '%02n - %t.mp3' input.mp3)"
mv -vi input.mp3 "$(eyeD3 --plugin=display -p '$num(%n%, 2) - %t%.mp3' input.mp3)"

# Pretty-format CSV file
column -s',' -t result.csv | less -#5 -N -S

# Remove file while preventing data recovery (only HDD!)
shred -u <file>

# Print all lines starting from the <n>th
tail -n +<n>

# Show <n> random lines from file
shuf -n <n> <file>
